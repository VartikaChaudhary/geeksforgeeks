class Node
{
    int key;
    Node left, right;
    public Node(int item)
    {
        key = item;
        left = right = null;
    }
}
 
class BinaryTree
{
    Node root;
    BinaryTree()
    {
        root = null;
    }
    void printPostorder(Node node)		   // Given a binary tree, print its nodes according to the "bottom-up" postorder traversal.
    {
        if (node == null)
            return;
        printPostorder(node.left);		       // first recur on left subtree
        printPostorder(node.right);		             // then recur on right subtree
        System.out.print(node.key + " ");
    }
    void printInorder(Node node)		   // Given a binary tree, print its nodes in inorder
    {
        if (node == null)
            return;
        printInorder(node.left);		       // first recur on left child
         System.out.print(node.key + " ");		       // then print the data of node
        printInorder(node.right);		        // now recur on right child
    }
    void printPreorder(Node node)		   // Given a binary tree, print its nodes in preorder
    {
        if (node == null)
            return;
        System.out.print(node.key + " ");		       // first print data of node 
        printPreorder(node.left);		       // then recur on left sutree 
        printPreorder(node.right);		       // now recur on right subtree 
    }
    void printPostorder()  {     printPostorder(root);  }		   // Wrappers over above recursive functions
    void printInorder()    {     printInorder(root);   }
    void printPreorder()   {     printPreorder(root);  }
 
 
    public static void main(String[] args)
    {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
 
        System.out.println("Preorder traversal of binary tree is ");
        tree.printPreorder();
 
        System.out.println("\nInorder traversal of binary tree is ");
        tree.printInorder();
 
        System.out.println("\nPostorder traversal of binary tree is ");
        tree.printPostorder();
    }
}