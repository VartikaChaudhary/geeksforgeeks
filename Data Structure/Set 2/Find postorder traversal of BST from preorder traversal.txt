using namespace std;
 
void findPostOrderUtil(int pre[], int n, int minval, int maxval, int& preIndex)
{
    if (preIndex == n)	// If entire preorder array is traversed then return as no more element is left to be added to post order array.
        return;
    if (pre[preIndex] < minval || pre[preIndex] > maxval) {		// If array element does not lie in range specified, then it is not part of current subtree.
        return;
    }
    int val = pre[preIndex];		 // Store current value, to be printed later, after printing left and right subtrees. Increment preIndex to find left and right     preIndex++;			//subtrees, and pass this updated value to recursive calls
 
    findPostOrderUtil(pre, n, minval, val, preIndex);		 // All elements with value between minval and val lie in left subtree.
    findPostOrderUtil(pre, n, val, maxval, preIndex);		// All elements with value between val and maxval lie in right subtree.
    cout << val << " ";
}
 
void findPostOrder(int pre[], int n)		// Function to find postorder traversal.
{
     int preIndex = 0;		    // To store index of element to be traversed next in preorder array.
			    // This is passed by reference to utility function.
    findPostOrderUtil(pre, n, INT_MIN, INT_MAX, preIndex);
}
 

int main()
{
    int pre[] = { 40, 30, 35, 80, 100 }; 
    int n = sizeof(pre) / sizeof(pre[0]);
    findPostOrder(pre, n);
    return 0;
}
