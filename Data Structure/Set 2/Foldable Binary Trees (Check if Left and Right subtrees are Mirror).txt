class Node 
{
    int data;
    Node left, right;
     Node(int item) 
    {
        data = item;
        left = right = null;
    }
}
  
class BinaryTree 
{
     Node root;
    boolean IsFoldable(Node node) 
    {
        if (node == null)
            return true;
  
        return IsFoldableUtil(node.left, node.right);
    }
    boolean IsFoldableUtil(Node n1, Node n2) 
    {
        if (n1 == null && n2 == null)		// If both left and right subtrees are NULL, then return true 
            return true;
        if (n1 == null || n2 == null)		// If one of the trees is NULL and other is not, then return false 
            return false;
        return IsFoldableUtil(n1.left, n2.right)		// Otherwise check if left and right subtrees are mirrors of their counterparts 
                && IsFoldableUtil(n1.right, n2.left);
    }
  
    public static void main(String args[]) {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.right.left = new Node(4);
        tree.root.left.right = new Node(5);
         if (tree.IsFoldable(tree.root))
            System.out.println("tree is foldable");
        else
            System.out.println("Tree is not foldable");
  
    }
  
}