#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 100		// Maximum stack size
 
struct Node {
    int data;
    struct Node *left, *right;
};
 
struct Stack {		// Stack type
    int size;
    int top;
    struct Node** array;
};
 
struct Node* newNode(int data)
{
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->left = node->right = NULL;
    return node;
}
 
struct Stack* createStack(int size)		// A utility function to create a stack of given size
{
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->size = size;
    stack->top = -1;
    stack->array = (struct Node**)malloc(stack->size * sizeof(struct Node*));
    return stack;
}
 
int isFull(struct Stack* stack)			// BASIC OPERATIONS OF STACK
{
    return stack->top - 1 == stack->size;
}
 
int isEmpty(struct Stack* stack)
{
    return stack->top == -1;
}
 
void push(struct Stack* stack, struct Node* node)
{
    if (isFull(stack))
        return;
    stack->array[++stack->top] = node;
}
 
struct Node* pop(struct Stack* stack)
{
    if (isEmpty(stack))
        return NULL;
    return stack->array[stack->top--];
}
 
void postOrderIterative(struct Node* root)			// An iterative function to do post order traversal of a given binary tree
{
    if (root == NULL)
        return;

    struct Stack* s1 = createStack(MAX_SIZE);		// Create two stacks
    struct Stack* s2 = createStack(MAX_SIZE);
 
    push(s1, root);			   // push root to first stack
    struct Node* node;
 
    while (!isEmpty(s1)) {		   // Run while first stack is not empty
        node = pop(s1);		        // Pop an item from s1 and push it to s2
        push(s2, node);
        if (node->left)			       // Push left and right children of removed item to s1
            push(s1, node->left);
        if (node->right)
            push(s1, node->right);
    }
 
    while (!isEmpty(s2)) {		   // Print all elements of second stack
        node = pop(s2);
        printf("%d ", node->data);
    }
}
 
int main()
{
    struct Node* root = NULL;
    root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
    root->right->left = newNode(6);
    root->right->right = newNode(7);
 
    postOrderIterative(root);
 
    return 0;
}