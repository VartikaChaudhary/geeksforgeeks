class tNode 
{
    int data;
    tNode left, right;
    tNode(int item) 
    {
        data = item;
        left = right = null;
    }
}
  
class BinaryTree 
{
    tNode root;
    void MorrisTraversal(tNode root) {		// Function to traverse binary tree without recursion and without stack
        tNode current, pre;
        if (root == null)
            return;
        current = root;
        while (current != null) 
        {
            if (current.left == null) 
            {
                System.out.print(current.data + " ");
                current = current.right;
            } 
            else
            {
                pre = current.left;		// Find the inorder predecessor of current
                while (pre.right != null && pre.right != current) 
                    pre = pre.right;
                if (pre.right == null)		// Make current as right child of its inorder predecessor 
                {
                    pre.right = current;
                    current = current.left;
                } 
                 else		// Revert the changes made in if part to restore the original tree i.e.,fix the right child of predecssor
                 {
                    pre.right = null;
                    System.out.print(current.data + " ");
                    current = current.right;
                }  				 // End of if condition pre->right == NULL
                  
            } 					// End of if condition current->left == NULL
              
        } 				// End of while
          
    }
      
    public static void main(String args[]) 
    {
        BinaryTree tree = new BinaryTree();
        tree.root = new tNode(1);
        tree.root.left = new tNode(2);
        tree.root.right = new tNode(3);
        tree.root.left.left = new tNode(4);
        tree.root.left.right = new tNode(5);
          
        tree.MorrisTraversal(tree.root);
    }
}