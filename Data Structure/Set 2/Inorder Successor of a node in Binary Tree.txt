using namespace std;

struct Node
{
    int data;
    struct Node *left, *right;
};
Node* temp = new Node;		// Temporary node for case 2
Node* newNode(int data)		// Utility function to create a new tree node
{
    Node *temp = new Node;
    temp->data = data;
    temp->left = temp->right = NULL;
    return temp;
}
Node* leftMostNode(Node* node)		// function to find left most node in a tree
{
    while (node != NULL && node->left != NULL)
        node = node->left;
    return node;
}
Node* rightMostNode(Node* node)		// function to find right most node in a tree
{
    while (node != NULL && node->right != NULL)
        node = node->right;
    return node;
}
Node* findInorderRecursive(Node* root, Node* x )		// recursive function to find the Inorder Scuccessor when the right child of node x is NULL
{
    if (!root)
        return NULL;
 
    if (root==x || (temp = findInorderRecursive(root->left,x)) || (temp = findInorderRecursive(root->right,x)))
    {
        if (temp)
        {
            if (root->left == temp)
            {
                cout << "Inorder Successor of " << x->data;
                cout << " is "<< root->data << "\n";
                return NULL;
            }
        }
        return root;
    }
    return NULL;
}

void inorderSuccesor(Node* root, Node* x)		// function to find inorder successor of  a node
{
    if (x->right != NULL)		// Case1: If right child is not NULL
    {
        Node* inorderSucc = leftMostNode(x->right);
        cout<<"Inorder Successor of "<<x->data<<" is ";
        cout<<inorderSucc->data<<"\n";
    }
    if (x->right == NULL)		// Case2: If right child is NULL
    {    
        int f = 0;
        Node* rightMost = rightMostNode(root);
        if (rightMost == x)			       // case3: If x is the right most node
            cout << "No inorder successor! Right most node.\n";
        else
            findInorderRecursive(root, x);
    }
}
 
int main()
{
    Node* root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
    root->right->right = newNode(6);
 
    inorderSuccesor(root, root->right);		// Case 1 
    inorderSuccesor(root, root->left->left);		// case 2
    inorderSuccesor(root, root->right->right);		// case 3
 
    return 0;
}