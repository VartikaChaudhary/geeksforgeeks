class Node
{
    int data;
    Node left, right;
    public Node(int item)
    {
        data = item;
        left = right = null;
    }
}

class BinaryTree
{
    Node root;
    public BinaryTree()
    {
        root = null;
    }
    void printLevelOrder()		    // function to print level order traversal of tree
    {
        int h = height(root);
        int i;
        for (i=1; i<=h; i++)
            printGivenLevel(root, i);
    }
    int height(Node root)	    // Compute the "height" of a tree -- the number of nodes along the longest path from the root node down to the farthest leaf node.
    {
        if (root == null)
           return 0;
        else
        {
            int lheight = height(root.left);		            // compute  height of each subtree 
            int rheight = height(root.right);
            if (lheight > rheight)		            // use the larger one 
                return(lheight+1);
            else return(rheight+1); 
        }
    }
    void printGivenLevel (Node root ,int level)		    // Print nodes at the given level 
    {
        if (root == null)
            return;
        if (level == 1)
            System.out.print(root.data + " ");
        else if (level > 1)
        {
            printGivenLevel(root.left, level-1);
            printGivenLevel(root.right, level-1);
        }
    }
    
    public static void main(String args[])
    {
       BinaryTree tree = new BinaryTree();
       tree.root= new Node(1);
       tree.root.left= new Node(2);
       tree.root.right= new Node(3);
       tree.root.left.left= new Node(4);
       tree.root.left.right= new Node(5);
       
       System.out.println("Level order traversal of binary tree is ");
       tree.printLevelOrder();
    }
}