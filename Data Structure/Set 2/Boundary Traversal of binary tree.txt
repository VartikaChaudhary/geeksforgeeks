#include <stdio.h>
#include <stdlib.h>
 
struct node		// A binary tree node has data, pointer to left child and a pointer to right child
{
    int data;
    struct node *left, *right;
};

void printLeaves(struct node* root)		// A simple function to print leaf nodes of a binary tree
{
    if ( root )
    {
        printLeaves(root->left);
        if ( !(root->left)  &&  !(root->right) )		       // Print it if it is a leaf node
            printf("%d ", root->data);
       printLeaves(root->right);
    }
}
 
void printBoundaryLeft(struct node* root)	// A function to print all left boundry nodes, except a leaf node. Print the nodes in TOP DOWN manner
{
    if (root)
    {
        if (root->left)
        {
            printf("%d ", root->data);		            // to ensure top down order, print the node before calling itself for left subtree
            printBoundaryLeft(root->left);
        }
        else if( root->right )
        {
            printf("%d ", root->data);
            printBoundaryLeft(root->right);		        // do nothing if it is a leaf node, this way we avoid duplicates in output
        }
    }
}
 
void printBoundaryRight(struct node* root)		// A function to print all right boundry nodes, except a leaf node Print the nodes in BOTTOM UP manner
{
    if (root)
    {
        if ( root->right )
        {
            printBoundaryRight(root->right);		            // to ensure bottom up order, first call for right  subtree, then print this node
            printf("%d ", root->data);
        }
        else if ( root->left )
        {
            printBoundaryRight(root->left);
            printf("%d ", root->data);
        }				       // do nothing if it is a leaf node, this way we avoid duplicates in output
    }
}
 
void printBoundary (struct node* root)		// A function to do boundary traversal of a given binary tree
{
    if (root)
    {
        printf("%d ",root->data);
        printBoundaryLeft(root->left);		       // Print the left boundary in top-down manner.
        printLeaves(root->left);		       // Print all leaf nodes
        printLeaves(root->right);
        printBoundaryRight(root->right);		       // Print the right boundary in bottom-up manner
    }
}
 
struct node* newNode( int data )			// A utility function to create a node
{
    struct node* temp = (struct node *) malloc( sizeof(struct node) );
    temp->data = data;
    temp->left = temp->right = NULL;
 
    return temp;
}
 
int main()
{
 
    struct node *root         = newNode(20);
    root->left                = newNode(8);
    root->left->left          = newNode(4);
    root->left->right         = newNode(12);
    root->left->right->left   = newNode(10);
    root->left->right->right  = newNode(14);
    root->right               = newNode(22);
    root->right->right        = newNode(25);
 
    printBoundary( root );
 
    return 0;
}