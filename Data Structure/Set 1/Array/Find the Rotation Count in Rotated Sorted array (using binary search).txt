import java.util.*;
import java.lang.*;
import java.io.*;
 
class BinarySearch
{
    static int countRotations(int arr[], int low, int high)			// Returns count of rotations for an array which is first sorted in ascending order, then rotated
    {
        if (high < low)				// This condition is needed to handle  the case when array is not rotated  at all
            return 0;
 
         if (high == low)				// If there is only one element left
            return low;
 
        int mid = low + (high - low)/2; 
 
        if (mid < high && arr[mid+1] < arr[mid])		// Check if element (mid+1) is minimum element. Consider the cases like {3, 4, 5, 1, 2}
            return (mid + 1);
 
         if (mid > low && arr[mid] < arr[mid - 1])		// Check if mid itself is minimum element
            return mid;
 
        if (arr[high] > arr[mid])				// Decide whether we need to go to left half or right half
            return countRotations(arr, low, mid - 1);
 
        return countRotations(arr, mid + 1, high);
    }
 
    public static void main (String[] args) 
    {
        int arr[] = {15, 18, 2, 3, 6, 12};
        int n = arr.length;
         
        System.out.println(countRotations(arr, 0, n-1));
    }
}