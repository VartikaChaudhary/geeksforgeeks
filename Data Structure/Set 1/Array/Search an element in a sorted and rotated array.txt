class Main
{
    static int pivotedBinarySearch(int arr[], int n, int key)  	  // Searches an element key in a pivoted sorted array arrp[] of size n
    {
       int pivot = findPivot(arr, 0, n-1);
           if (pivot == -1)  			       // If we didn't find a pivot, then 
           return binarySearch(arr, 0, n-1, key);	      // array is not rotated at all
           
       if (arr[pivot] == key) 			// If we found a pivot, then first 
           return pivot;				// compare with pivot and then
					// search in two subarrays around pivot

       if (arr[0] <= key)
           return binarySearch(arr, 0, pivot-1, key);
       return binarySearch(arr, pivot+1, n-1, key);
    }
      
    static int findPivot(int arr[], int low, int high) 		    // Function to get pivot. For array 3, 4, 5, 6, 1, 2 it returns 3 (index of 6)
    {
       if (high < low)  
            return -1;
       if (high == low) 
            return low;
       int mid = (low + high)/2;   
       if (mid < high && arr[mid] > arr[mid + 1])
           return mid;
       if (mid > low && arr[mid] < arr[mid - 1])
           return (mid-1);
       if (arr[low] >= arr[mid])
           return findPivot(arr, low, mid-1);
       return findPivot(arr, mid + 1, high);
    }
      
    static int binarySearch(int arr[], int low, int high, int key)
    {
       if (high < low)
           return -1;
        
       int mid = (low + high)/2;  
       if (key == arr[mid])
           return mid;
       if (key > arr[mid])
           return binarySearch(arr, (mid + 1), high, key);
       return binarySearch(arr, low, (mid -1), key);
    }
   
    public static void main(String args[])
    {
       int arr1[] = {5, 6, 7, 8, 9, 10, 1, 2, 3};
       int n = arr1.length;
       int key = 3;
       System.out.println("Index of the element is : "
                      + pivotedBinarySearch(arr1, n, key));
    }
}
